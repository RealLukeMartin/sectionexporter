<?php
/**
 * @file
 * This supplies a custom GeoJSON feed.
 */

/**
 * Implements hook_menu().
 *
 * Define menu items and page callbacks. This hook enables modules to register
 * paths in order to define how URL requests are handled. Paths may be registered
 * for URL handling only, or they can register a link to be placed in a menu
 * (usually the Navigation menu). A path and its associated information is
 * commonly called a "menu router item". This hook is rarely called (for example,
 * when modules are enabled), and its results are cached in the database.
 * hook_menu() implementations return an associative array whose keys define
 * paths and whose values are an.
 *
 * @return
 *   An array of menu items. Each menu item has a key corresponding to the Drupal
 *   path being registered. The corresponding array value is an associative array
 *   that may contain the following key-value pairs: "title": Required. The
 *   untranslated title of the menu item. "title callback": Function to generate
 *   the title; defaults to t(). If you require only the raw string to be output,
 *   set this to FALSE. "title arguments": Arguments to send to t() or your
 *   custom callback, with path component substitution as described above.
 */

function sectionexporter_menu() {
  $items['sections.geojson'] = array(
    'title' => 'Section Exporter',
    'page callback' => 'sectionexporter_page',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}
//Create page callback
function sectionexporter_page() {
		// drupal_add_http_header('Content-Type', 'application/javascript; utf-8');
		//Header
		print '{' . "\n";
		print '"type": "FeatureCollection",' . "\n";
		print '"crs": { "type": "name", "properties": { "name": "urn:ogc:def:crs:OGC:1.3:CRS84" } },' . "\n\n";
		print '"features": [' . "\n";
		//Body
		$property_nodes = get_all_property_nodes();
		$home_nodes = get_all_home_nodes();
		se_create_feed($property_nodes, $home_nodes);
		//Closer
		print ']' . "\n}";
}
// grab all of the property nodes
function get_all_property_nodes() {
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
        ->entityCondition('bundle', 'property')
        ->fieldCondition('field_section', 'value', 'NULL', '!=')
        ->fieldCondition('field_block', 'value', 'NULL', '!=')
        ->fieldCondition('field_coordinates', 'value', 'NULL', '!=')
        ->fieldCondition('field_lot', 'value', 'NULL', '!=')
        ->propertyCondition('status', 1);
  $result = $query->execute();

  if (isset($result['node'])) {
    $property_nids = array_keys($result['node']);
    $property_items = entity_load('node', $property_nids);
  }
  return $property_items;
}
// grab all of the home nodes
function get_all_home_nodes() {
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
        ->entityCondition('bundle', 'home')
        ->fieldCondition('field_bedrooms', 'value', 'NULL', '!=')
        //->fieldCondition('field_available', 'value', 'NULL', '!=')
        //->fieldCondition('field_sold', 'value', 'NULL', '!=')
        ->propertyCondition('status', 1);
  $result = $query->execute();

  if (isset($result['node'])) {
    $home_nids = array_keys($result['node']);
    $home_items = entity_load('node', $home_nids);
  }
  return $home_items;
}
//Build the geojson data
function se_create_feed($nodes, $ref_nodes) {
	$feeds = array();
	$nodes_length = count($nodes);
	$property_count = 0;
	//loop through each node
	foreach($nodes as $node) {
		
		$address = $node->title;
		$lot = $node->field_lot['und'][0]['value'];
		$section = $node->field_section['und'][0]['value'];
		$block = $node->field_block['und'][0]['value'];
		$coordinates = $node->field_coordinates['und'][0]['value'];
		$field_home = $node->field_home['und'][0]['target_id'];
		$lot_default = 5163;
		$beds = 0;
		$baths = 0;
		$image = ' ';
		$node_id = $node->nid;
		$price = '"Lot"';
		$link = '/';
		$lot_size = "50";
		$status = "Lot";

		//Loop Through each ref_node
		foreach( $ref_nodes as $ref_node ) {
			//Set up variables for ref_node
			$ref_address = $ref_node->title;
			$ref_id = $ref_node->nid;
			$field_home = $node->field_home['und'][0]['target_id'];
			//(Initial) Check the lots to see if any need to be homes
			if ( $field_home == $lot_default ) {
				if ( $address == $ref_address ) {
					$node_l = node_load($node_id);
					$node_l->field_home['und'][0]['target_id'] = $ref_id;
					$field_home = $ref_id;
					field_attach_update('node', $node_l);
				}
			}
			if ( $field_home == $ref_id ) {
				$beds = $ref_node->field_bedrooms['und'][0]['value'];
				$baths = $ref_node->field_bathrooms['und'][0]['value'];
				$price = isset($ref_node->field_price['und'][0]['value']) ? price_format($ref_node->field_price['und'][0]['value']) :  '"N/A"';
				$link = '/homes/' . str_replace(" ", "-", $ref_address);
				$image = file_create_url($ref_node->field_home_gallery_images['und'][0]['uri']);
				$lot_size = $ref_node->field_lot_size['und'][0]['value'];
				$status = 'Available';
				$sold = $ref_node->field_sold['und'][0]['value'];

				if ( $sold == 1 ) {
					$status = 'Sold';
				}
				else {
					$status = 'Available';
				}

				$feeds[$property_count] = _print_feed_item($lot, $address, $block, $section, $beds, $baths, $price, $link, $image, $lot_size, $status, $coordinates);

				break;
			}
		}
		$feeds[$property_count] = _print_feed_item($lot, $address, $block, $section, $beds, $baths, $price, $link, $image, $lot_size, $status, $coordinates);

		$property_count++;
	}
	//print the feed
	_print_all_feed_items($feeds);
}

function price_format($num) {
	$num_format = number_format($num);
	$num_string = strval($num_format);

	return '"$' . $num_string . '"';
}
//Helper functions to print feed data
function _print_feed_item($lot, $address, $block, $section, $beds, $baths, $price, $link, $image, $lot_size, $status, $coordinates) {
	return '{ "type": "Feature", "properties": { "Lot": ' . $lot . ', "Address": ' . '"' . $address . '"' . ', "Block": ' . $block . ', "Section": ' . $section . ', "Beds": ' . $beds . ', "Baths": ' . $baths . ', "Price": ' . $price . ', "Link": "' . $link . '" ' . ', "Image": "' . $image .'" ' . ', "LotSize": ' . $lot_size . ', "Status": "' . $status . '" }' . ', "geometry": { "type": "Polygon", "coordinates": [[' . $coordinates . ']]}}';
}

function _print_all_feed_items($feeds) {
	$feeds_count = 0;
	$feeds_length = count($feeds);
	foreach($feeds as $feed) {
		if ( $feeds_count == $feeds_length - 1 ) {
			print $feed;
		}
		else {
			print $feed . ',' . "\n";
			$feeds_count++;
		}
	}
}
